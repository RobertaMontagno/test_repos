n [3]: iris= load_iris()

In [4]: iris.data
Out[4]: 
array([[ 5.1,  3.5,  1.4,  0.2],
       [ 4.9,  3. ,  1.4,  0.2],
       [ 4.7,  3.2,  1.3,  0.2],
       [ 4.6,  3.1,  1.5,  0.2],
       [ 5. ,  3.6,  1.4,  0.2],
       [ 5.4,  3.9,  1.7,  0.4],
       [ 4.6,  3.4,  1.4,  0.3],
       [ 5. ,  3.4,  1.5,  0.2],
       [ 4.4,  2.9,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5.4,  3.7,  1.5,  0.2],
       [ 4.8,  3.4,  1.6,  0.2],
       [ 4.8,  3. ,  1.4,  0.1],
       [ 4.3,  3. ,  1.1,  0.1],
       [ 5.8,  4. ,  1.2,  0.2],
       [ 5.7,  4.4,  1.5,  0.4],
       [ 5.4,  3.9,  1.3,  0.4],
       [ 5.1,  3.5,  1.4,  0.3],
       [ 5.7,  3.8,  1.7,  0.3],
       [ 5.1,  3.8,  1.5,  0.3],
       [ 5.4,  3.4,  1.7,  0.2],
       [ 5.1,  3.7,  1.5,  0.4],
       [ 4.6,  3.6,  1. ,  0.2],
       [ 5.1,  3.3,  1.7,  0.5],
       [ 4.8,  3.4,  1.9,  0.2],
       [ 5. ,  3. ,  1.6,  0.2],
       [ 5. ,  3.4,  1.6,  0.4],
       [ 5.2,  3.5,  1.5,  0.2],
       [ 5.2,  3.4,  1.4,  0.2],
       [ 4.7,  3.2,  1.6,  0.2],
       [ 4.8,  3.1,  1.6,  0.2],
       [ 5.4,  3.4,  1.5,  0.4],
       [ 5.2,  4.1,  1.5,  0.1],
       [ 5.5,  4.2,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5. ,  3.2,  1.2,  0.2],
       [ 5.5,  3.5,  1.3,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 4.4,  3. ,  1.3,  0.2],
       [ 5.1,  3.4,  1.5,  0.2],
       [ 5. ,  3.5,  1.3,  0.3],
       [ 4.5,  2.3,  1.3,  0.3],
       [ 4.4,  3.2,  1.3,  0.2],
       [ 5. ,  3.5,  1.6,  0.6],
       [ 5.1,  3.8,  1.9,  0.4],
       [ 4.8,  3. ,  1.4,  0.3],
       [ 5.1,  3.8,  1.6,  0.2],
       [ 4.6,  3.2,  1.4,  0.2],
       [ 5.3,  3.7,  1.5,  0.2],
       [ 5. ,  3.3,  1.4,  0.2],
       [ 7. ,  3.2,  4.7,  1.4],
       [ 6.4,  3.2,  4.5,  1.5],
       [ 6.9,  3.1,  4.9,  1.5],
       [ 5.5,  2.3,  4. ,  1.3],
       [ 6.5,  2.8,  4.6,  1.5],
       [ 5.7,  2.8,  4.5,  1.3],
       [ 6.3,  3.3,  4.7,  1.6],
       [ 4.9,  2.4,  3.3,  1. ],
       [ 6.6,  2.9,  4.6,  1.3],
       [ 5.2,  2.7,  3.9,  1.4],
       [ 5. ,  2. ,  3.5,  1. ],
       [ 5.9,  3. ,  4.2,  1.5],
       [ 6. ,  2.2,  4. ,  1. ],
       [ 6.1,  2.9,  4.7,  1.4],
       [ 5.6,  2.9,  3.6,  1.3],
       [ 6.7,  3.1,  4.4,  1.4],
       [ 5.6,  3. ,  4.5,  1.5],
       [ 5.8,  2.7,  4.1,  1. ],
       [ 6.2,  2.2,  4.5,  1.5],
       [ 5.6,  2.5,  3.9,  1.1],
       [ 5.9,  3.2,  4.8,  1.8],
       [ 6.1,  2.8,  4. ,  1.3],
       [ 6.3,  2.5,  4.9,  1.5],
       [ 6.1,  2.8,  4.7,  1.2],
       [ 6.4,  2.9,  4.3,  1.3],
       [ 6.6,  3. ,  4.4,  1.4],
       [ 6.8,  2.8,  4.8,  1.4],
       [ 6.7,  3. ,  5. ,  1.7],
       [ 6. ,  2.9,  4.5,  1.5],
       [ 5.7,  2.6,  3.5,  1. ],
       [ 5.5,  2.4,  3.8,  1.1],
       [ 5.5,  2.4,  3.7,  1. ],
       [ 5.8,  2.7,  3.9,  1.2],
       [ 6. ,  2.7,  5.1,  1.6],
       [ 5.4,  3. ,  4.5,  1.5],
       [ 6. ,  3.4,  4.5,  1.6],
       [ 6.7,  3.1,  4.7,  1.5],
       [ 6.3,  2.3,  4.4,  1.3],
       [ 5.6,  3. ,  4.1,  1.3],
       [ 5.5,  2.5,  4. ,  1.3],
       [ 5.5,  2.6,  4.4,  1.2],
       [ 6.1,  3. ,  4.6,  1.4],
       [ 5.8,  2.6,  4. ,  1.2],
       [ 5. ,  2.3,  3.3,  1. ],
       [ 5.6,  2.7,  4.2,  1.3],
       [ 5.7,  3. ,  4.2,  1.2],
       [ 5.7,  2.9,  4.2,  1.3],
       [ 6.2,  2.9,  4.3,  1.3],
       [ 5.1,  2.5,  3. ,  1.1],
       [ 5.7,  2.8,  4.1,  1.3],
       [ 6.3,  3.3,  6. ,  2.5],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 7.1,  3. ,  5.9,  2.1],
       [ 6.3,  2.9,  5.6,  1.8],
       [ 6.5,  3. ,  5.8,  2.2],
       [ 7.6,  3. ,  6.6,  2.1],
       [ 4.9,  2.5,  4.5,  1.7],
       [ 7.3,  2.9,  6.3,  1.8],
       [ 6.7,  2.5,  5.8,  1.8],
       [ 7.2,  3.6,  6.1,  2.5],
       [ 6.5,  3.2,  5.1,  2. ],
       [ 6.4,  2.7,  5.3,  1.9],
       [ 6.8,  3. ,  5.5,  2.1],
       [ 5.7,  2.5,  5. ,  2. ],
       [ 5.8,  2.8,  5.1,  2.4],
       [ 6.4,  3.2,  5.3,  2.3],
       [ 6.5,  3. ,  5.5,  1.8],
       [ 7.7,  3.8,  6.7,  2.2],
       [ 7.7,  2.6,  6.9,  2.3],
       [ 6. ,  2.2,  5. ,  1.5],
       [ 6.9,  3.2,  5.7,  2.3],
       [ 5.6,  2.8,  4.9,  2. ],
       [ 7.7,  2.8,  6.7,  2. ],
       [ 6.3,  2.7,  4.9,  1.8],
       [ 6.7,  3.3,  5.7,  2.1],
       [ 7.2,  3.2,  6. ,  1.8],
       [ 6.2,  2.8,  4.8,  1.8],
       [ 6.1,  3. ,  4.9,  1.8],
       [ 6.4,  2.8,  5.6,  2.1],
       [ 7.2,  3. ,  5.8,  1.6],
       [ 7.4,  2.8,  6.1,  1.9],
       [ 7.9,  3.8,  6.4,  2. ],
       [ 6.4,  2.8,  5.6,  2.2],
       [ 6.3,  2.8,  5.1,  1.5],
       [ 6.1,  2.6,  5.6,  1.4],
       [ 7.7,  3. ,  6.1,  2.3],
       [ 6.3,  3.4,  5.6,  2.4],
       [ 6.4,  3.1,  5.5,  1.8],
       [ 6. ,  3. ,  4.8,  1.8],
       [ 6.9,  3.1,  5.4,  2.1],
       [ 6.7,  3.1,  5.6,  2.4],
       [ 6.9,  3.1,  5.1,  2.3],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 6.8,  3.2,  5.9,  2.3],
       [ 6.7,  3.3,  5.7,  2.5],
       [ 6.7,  3. ,  5.2,  2.3],
       [ 6.3,  2.5,  5. ,  1.9],
       [ 6.5,  3. ,  5.2,  2. ],
       [ 6.2,  3.4,  5.4,  2.3],
       [ 5.9,  3. ,  5.1,  1.8]])

In [5]: iris.target
Out[5]: 
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])

In [6]: iris.data.shape
Out[6]: (150, 4)

In [7]: iris.target.shape
Out[7]: (150,)

In [8]: X=iris.data[:,:2]

In [9]: X
Out[9]: 
array([[ 5.1,  3.5],
       [ 4.9,  3. ],
       [ 4.7,  3.2],
       [ 4.6,  3.1],
       [ 5. ,  3.6],
       [ 5.4,  3.9],
       [ 4.6,  3.4],
       [ 5. ,  3.4],
       [ 4.4,  2.9],
       [ 4.9,  3.1],
       [ 5.4,  3.7],
       [ 4.8,  3.4],
       [ 4.8,  3. ],
       [ 4.3,  3. ],
       [ 5.8,  4. ],
       [ 5.7,  4.4],
       [ 5.4,  3.9],
       [ 5.1,  3.5],
       [ 5.7,  3.8],
       [ 5.1,  3.8],
       [ 5.4,  3.4],
       [ 5.1,  3.7],
       [ 4.6,  3.6],
       [ 5.1,  3.3],
       [ 4.8,  3.4],
       [ 5. ,  3. ],
       [ 5. ,  3.4],
       [ 5.2,  3.5],
       [ 5.2,  3.4],
       [ 4.7,  3.2],
       [ 4.8,  3.1],
       [ 5.4,  3.4],
       [ 5.2,  4.1],
       [ 5.5,  4.2],
       [ 4.9,  3.1],
       [ 5. ,  3.2],
       [ 5.5,  3.5],
       [ 4.9,  3.1],
       [ 4.4,  3. ],
       [ 5.1,  3.4],
       [ 5. ,  3.5],
       [ 4.5,  2.3],
       [ 4.4,  3.2],
       [ 5. ,  3.5],
       [ 5.1,  3.8],
       [ 4.8,  3. ],
       [ 5.1,  3.8],
       [ 4.6,  3.2],
       [ 5.3,  3.7],
       [ 5. ,  3.3],
       [ 7. ,  3.2],
       [ 6.4,  3.2],
       [ 6.9,  3.1],
       [ 5.5,  2.3],
       [ 6.5,  2.8],
       [ 5.7,  2.8],
       [ 6.3,  3.3],
       [ 4.9,  2.4],
       [ 6.6,  2.9],
       [ 5.2,  2.7],
       [ 5. ,  2. ],
       [ 5.9,  3. ],
       [ 6. ,  2.2],
       [ 6.1,  2.9],
       [ 5.6,  2.9],
       [ 6.7,  3.1],
       [ 5.6,  3. ],
       [ 5.8,  2.7],
       [ 6.2,  2.2],
       [ 5.6,  2.5],
       [ 5.9,  3.2],
       [ 6.1,  2.8],
       [ 6.3,  2.5],
       [ 6.1,  2.8],
       [ 6.4,  2.9],
       [ 6.6,  3. ],
       [ 6.8,  2.8],
       [ 6.7,  3. ],
       [ 6. ,  2.9],
       [ 5.7,  2.6],
       [ 5.5,  2.4],
       [ 5.5,  2.4],
       [ 5.8,  2.7],
       [ 6. ,  2.7],
       [ 5.4,  3. ],
       [ 6. ,  3.4],
       [ 6.7,  3.1],
       [ 6.3,  2.3],
       [ 5.6,  3. ],
       [ 5.5,  2.5],
       [ 5.5,  2.6],
       [ 6.1,  3. ],
       [ 5.8,  2.6],
       [ 5. ,  2.3],
       [ 5.6,  2.7],
       [ 5.7,  3. ],
       [ 5.7,  2.9],
       [ 6.2,  2.9],
       [ 5.1,  2.5],
       [ 5.7,  2.8],
       [ 6.3,  3.3],
       [ 5.8,  2.7],
       [ 7.1,  3. ],
       [ 6.3,  2.9],
       [ 6.5,  3. ],
       [ 7.6,  3. ],
       [ 4.9,  2.5],
       [ 7.3,  2.9],
       [ 6.7,  2.5],
       [ 7.2,  3.6],
       [ 6.5,  3.2],
       [ 6.4,  2.7],
       [ 6.8,  3. ],
       [ 5.7,  2.5],
       [ 5.8,  2.8],
       [ 6.4,  3.2],
       [ 6.5,  3. ],
       [ 7.7,  3.8],
       [ 7.7,  2.6],
       [ 6. ,  2.2],
       [ 6.9,  3.2],
       [ 5.6,  2.8],
       [ 7.7,  2.8],
       [ 6.3,  2.7],
       [ 6.7,  3.3],
       [ 7.2,  3.2],
       [ 6.2,  2.8],
       [ 6.1,  3. ],
       [ 6.4,  2.8],
       [ 7.2,  3. ],
       [ 7.4,  2.8],
       [ 7.9,  3.8],
       [ 6.4,  2.8],
       [ 6.3,  2.8],
       [ 6.1,  2.6],
       [ 7.7,  3. ],
       [ 6.3,  3.4],
       [ 6.4,  3.1],
       [ 6. ,  3. ],
       [ 6.9,  3.1],
       [ 6.7,  3.1],
       [ 6.9,  3.1],
       [ 5.8,  2.7],
       [ 6.8,  3.2],
       [ 6.7,  3.3],
       [ 6.7,  3. ],
       [ 6.3,  2.5],
       [ 6.5,  3. ],
       [ 6.2,  3.4],
       [ 5.9,  3. ]])

In [10]: y=iris.target

In [11]: X_train=X[:90]

In [12]: X_train.shape
Out[12]: (90, 2)

In [13]: y_train=y[:90]

In [14]: y_train
Out[14]: 
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])

In [15]: X_train
Out[15]: 
array([[ 5.1,  3.5],
       [ 4.9,  3. ],
       [ 4.7,  3.2],
       [ 4.6,  3.1],
       [ 5. ,  3.6],
       [ 5.4,  3.9],
       [ 4.6,  3.4],
       [ 5. ,  3.4],
       [ 4.4,  2.9],
       [ 4.9,  3.1],
       [ 5.4,  3.7],
       [ 4.8,  3.4],
       [ 4.8,  3. ],
       [ 4.3,  3. ],
       [ 5.8,  4. ],
       [ 5.7,  4.4],
       [ 5.4,  3.9],
       [ 5.1,  3.5],
       [ 5.7,  3.8],
       [ 5.1,  3.8],
       [ 5.4,  3.4],
       [ 5.1,  3.7],
       [ 4.6,  3.6],
       [ 5.1,  3.3],
       [ 4.8,  3.4],
       [ 5. ,  3. ],
       [ 5. ,  3.4],
       [ 5.2,  3.5],
       [ 5.2,  3.4],
       [ 4.7,  3.2],
       [ 4.8,  3.1],
       [ 5.4,  3.4],
       [ 5.2,  4.1],
       [ 5.5,  4.2],
       [ 4.9,  3.1],
       [ 5. ,  3.2],
       [ 5.5,  3.5],
       [ 4.9,  3.1],
       [ 4.4,  3. ],
       [ 5.1,  3.4],
       [ 5. ,  3.5],
       [ 4.5,  2.3],
       [ 4.4,  3.2],
       [ 5. ,  3.5],
       [ 5.1,  3.8],
       [ 4.8,  3. ],
       [ 5.1,  3.8],
       [ 4.6,  3.2],
       [ 5.3,  3.7],
       [ 5. ,  3.3],
       [ 7. ,  3.2],
       [ 6.4,  3.2],
       [ 6.9,  3.1],
       [ 5.5,  2.3],
       [ 6.5,  2.8],
       [ 5.7,  2.8],
       [ 6.3,  3.3],
       [ 4.9,  2.4],
       [ 6.6,  2.9],
       [ 5.2,  2.7],
       [ 5. ,  2. ],
       [ 5.9,  3. ],
       [ 6. ,  2.2],
       [ 6.1,  2.9],
       [ 5.6,  2.9],
       [ 6.7,  3.1],
       [ 5.6,  3. ],
       [ 5.8,  2.7],
       [ 6.2,  2.2],
       [ 5.6,  2.5],
       [ 5.9,  3.2],
       [ 6.1,  2.8],
       [ 6.3,  2.5],
       [ 6.1,  2.8],
       [ 6.4,  2.9],
       [ 6.6,  3. ],
       [ 6.8,  2.8],
       [ 6.7,  3. ],
       [ 6. ,  2.9],
       [ 5.7,  2.6],
       [ 5.5,  2.4],
       [ 5.5,  2.4],
       [ 5.8,  2.7],
       [ 6. ,  2.7],
       [ 5.4,  3. ],
       [ 6. ,  3.4],
       [ 6.7,  3.1],
       [ 6.3,  2.3],
       [ 5.6,  3. ],
       [ 5.5,  2.5]])

In [16]: from sklearn import cross_validation

In [17]: X_train, X_test, y_train, y_test= cross_validation.train_test_split(X,y,test_size=0.2)

In [18]: X_train.shape, y_train.shape
Out[18]: ((120, 2), (120,))

In [19]: X_test.shape, y_test.shape
Out[19]: ((30, 2), (30,))

In [20]: y_train
Out[20]: 
array([2, 2, 0, 1, 0, 0, 2, 1, 0, 2, 0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2,
       2, 2, 1, 1, 0, 1, 1, 2, 0, 1, 2, 0, 0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0,
       2, 0, 2, 1, 2, 0, 0, 2, 1, 0, 0, 1, 0, 1, 2, 1, 0, 2, 0, 2, 2, 0, 0,
       1, 1, 1, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 0, 2, 1, 2, 1, 2, 0, 0, 1,
       2, 0, 1, 0, 2, 2, 2, 1, 1, 1, 1, 2, 0, 1, 2, 2, 0, 2, 1, 1, 2, 2, 2,
       1, 1, 1, 2, 0])

In [21]: from sklearn.tree import DecisionTreeClassifier

In [22]: from sklearn.tree import Dec
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-22-f0a37868f713> in <module>()
----> 1 from sklearn.tree import Dec

ImportError: cannot import name Dec

In [23]: from sklearn.tree import Dec
DecisionTreeClassifier  DecisionTreeRegressor   

In [23]: help(De
   ....: 
   ....: 
   ....: 
KeyboardInterrupt

In [23]: 
KeyboardInterrupt

In [23]: help(De
DecisionTreeClassifier  DeprecationWarning      Desktop/                

In [23]: help(DecisionTreeClassifier)
---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-23-cfb055ea4b77> in <module>()
----> 1 help(DecisionTreeClassifier)

/usr/lib/python2.7/site.pyc in __call__(self, *args, **kwds)
    468     def __call__(self, *args, **kwds):
    469         import pydoc
--> 470         return pydoc.help(*args, **kwds)
    471 
    472 def sethelper():

/usr/lib/python2.7/pydoc.pyc in __call__(self, request)
   1793     def __call__(self, request=_GoInteractive):
   1794         if request is not self._GoInteractive:
-> 1795             self.help(request)
   1796         else:
   1797             self.intro()

/usr/lib/python2.7/pydoc.pyc in help(self, request)
   1840             elif request: doc(request, 'Help on %s:')
   1841         elif isinstance(request, Helper): self()
-> 1842         else: doc(request, 'Help on %s:')
   1843         self.output.write('\n')
   1844 

/usr/lib/python2.7/pydoc.pyc in doc(thing, title, forceload)
   1577     """Display text documentation, given an object or a path to an object."""
   1578     try:
-> 1579         pager(render_doc(thing, title, forceload))
   1580     except (ImportError, ErrorDuringImport), value:
   1581         print value

/usr/lib/python2.7/pydoc.pyc in pager(text)
   1374     global pager
   1375     pager = getpager()
-> 1376     pager(text)
   1377 
   1378 def getpager():

/usr/lib/python2.7/pydoc.pyc in <lambda>(text)
   1396         return lambda text: tempfilepager(plain(text), 'more <')
   1397     if hasattr(os, 'system') and os.system('(less) 2>/dev/null') == 0:
-> 1398         return lambda text: pipepager(text, 'less')
   1399 
   1400     import tempfile

/usr/lib/python2.7/pydoc.pyc in pipepager(text, cmd)
   1418     try:
   1419         pipe.write(_encode(text))
-> 1420         pipe.close()
   1421     except IOError:
   1422         pass # Ignore broken pipes caused by quitting the pager program.

KeyboardInterrupt: 

In [24]: clf=DecisionTreeClassifier()

In [25]: 
KeyboardInterrupt

In [25]: clf_fitted=clf.fit(X_train,y_train)

In [26]: clf_fitted
Out[26]: 
DecisionTreeClassifier(compute_importances=None, criterion='gini',
            max_depth=None, max_features=None, max_leaf_nodes=None,
            min_density=None, min_samples_leaf=1, min_samples_split=2,
            random_state=None, splitter='best')

In [27]: clf_fitted.score(X_test,y_test)
Out[27]: 0.69999999999999996

In [28]: from sklearn import svm 

In [29]: clf=svm.LinearSVC(C=1)

In [30]: clf_fitted.score(X_test,y_test)
Out[30]: 0.69999999999999996

In [31]: clf_fitted.score(X_test,y_test)
Out[31]: 0.69999999999999996

In [32]: cross_validation.cross_val_score(clf,X,y,CV=5)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-32-1780cd9cc85b> in <module>()
----> 1 cross_validation.cross_val_score(clf,X,y,CV=5)

TypeError: cross_val_score() got an unexpected keyword argument 'CV'

In [33]: cross_validation.cross_val_score(clf,X,y,cv=5)
Out[33]: array([ 0.73333333,  0.8       ,  0.66666667,  0.86666667,  0.8       ])

In [34]: scores=cross_validation.cross_val_score(clf,X,y,cv=5)

In [35]: scores
Out[35]: array([ 0.73333333,  0.8       ,  0.7       ,  0.86666667,  0.8       ])

In [36]: print("Accuracy: %0.2f (+/- %0.2f)" % (scores.mean(), scores.std()*2))
Accuracy: 0.78 (+/- 0.12)

In [37]: clf=svm.LinearSVC(C=10)

In [38]: scores=cross_validation.cross_val_score(clf,X,y,cv=5)

In [39]: scores
Out[39]: array([ 0.7       ,  0.83333333,  0.7       ,  0.8       ,  0.76666667])

In [40]: print("Accuracy: %0.2f (+/- %0.2f)" % (scores.mean(), scores.std()*2))
Accuracy: 0.76 (+/- 0.11)

In [41]: Clist=[10*2 for i in range(-5,5)]

In [42]: Clist
Out[42]: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20]

In [43]: Clist=[10*i for i in range(-5,5)]

In [44]: Clist
Out[44]: [-50, -40, -30, -20, -10, 0, 10, 20, 30, 40]

In [45]: for C in CList:
   ....:     clf=svm.LinearSVC(C=C)
   ....:     scores=cross_validation.cross_val_score(clf,X,y,cv=5)
   ....:     print("Accuracy: %0.2f (+/- %0.2f)" % (scores.mean(), score.
   ....:     print("Accuracy: %0.2f (+/- %0.2f)" % (scores.mean(), score.std()*2))

